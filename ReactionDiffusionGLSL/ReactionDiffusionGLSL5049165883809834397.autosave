
PGraphics buffer0;
PGraphics buffer1;
PShader diff;
PShader colorify;
PImage seedImage;
boolean showHelp = true;

long lastFrameTimeNanos;

float feedRate = 0.10333333;
float killRate = 0.018666668;
float dRateA = 1.2166667;
float dRateB = 1.6500001;

/*
// Stable 1
float feedRate = 0.03666667;
float killRate = 0.029333336;
float dRateA = 1.3833333;
float dRateB = 1.15;

// Wiggly
float feedRate = 0.07766667;
float killRate = 0.0066666673;
float dRateA = 1.2166667;
float dRateB = 1.6500001;

// Wiggly 2
float feedRate = 0.10333333;
float killRate = 0.018666668;
float dRateA = 1.2166667;
float dRateB = 1.6500001;

// Fast flow:
float feedRate = 0.015;
float killRate = 0.041;
float dRateA = 0.97249997;
float dRateB = 0.9625;

float feedRate = 0.011666667;
float killRate = 0.028;
float dRateA = 2.7166667;
float dRateB = 2.9;

// Slow, crowded
float feedRate = 0.012666667;
float killRate = 0.039;
float dRateA = 3.016667;
float dRateB = 0.68333334;

// Fat spread
float feedRate = 0.007333334;
float killRate = 0.007666667;
float dRateA = 2.7166667;
float dRateB = 0.5;
*/

// Channel R = Chemical A, Channel G = Chemical B
void seedB() {
  // Add a little bit of Chemical B (Green)
  buffer0.beginDraw(); //<>//
  buffer0.blendMode(ADD);
  
  buffer0.tint(0, 255, 0);
  buffer0.image(seedImage, 0, 0, width, height);
  buffer0.noTint();
  noTint();
  
  buffer0.endDraw();
}

void seedA() {
  buffer0.beginDraw(); //<>//
  buffer0.blendMode(ADD);
  
  buffer0.tint(255, 0, 0);
  buffer0.image(seedImage, 0, 0, width, height);
  buffer0.noTint();
  
  buffer0.endDraw();
}

void fillWithA() {
  buffer0.beginDraw();
  buffer0.blendMode(BLEND);
  buffer0.background(255, 0, 0);
  buffer0.endDraw();
}

void setup(){
  size(800, 800, P2D);
  seedImage = loadImage("H.png");E  buffer0 = createGraphics(width, height, P2D);
  buffer1 = createGraphics(width, height, P2D);

  diff = loadShader("rd.glsl");

  // Using normalized pixel size as the grid spacing for Laplacian calculation
  diff.set("deltaU", 1.0/width);
  diff.set("deltaV", 1.0/height);

  colorify = loadShader("colorify.glsl");
  colorify.set("screenH", (float) height); 

  // Fill the buffer with Chemical A (Red)
  fillWithA();
  
  // Insert some amount of B to start the reaction
  seedB();
  
  lastFrameTimeNanos = System.nanoTime();
  
  setupControls();
}

void keyPressed() {  
  // Add chemicals to the scene
  if (key == 'A' || key == 'a') {
    seedA();
  }
  
  if (key == 'B' || key == 'b') {
    seedB();
    // seedBCircle();
  }
  
  if (key == 'C' || key == 'c') {
    fillWithA();
  }
  
  if (key == 'H' || key == 'h') {
    showHelp = !showHelp;
  }
  
  if (key == 'D' || key == 'd') {
    // Dump useful info
    println("float feedRate = " + feedRate + ";");
    println("float killRate = " + killRate + ";");
    println("float dRateA = " + dRateA + ";");
    println("float dRateB = " + dRateB + ";");
  }
}

void mouseDragged() {
  buffer0.beginDraw();
  buffer0.blendMode(BLEND);
  
  buffer0.noStroke();
  buffer0.fill(0, 255, 0);
  buffer0.ellipse(mouseX, mouseY, 20, 20);
  
  buffer0.endDraw();
}

void draw(){
  long newNanos = System.nanoTime();
  
  // diff.set("deltaTime", (newNanos - lastFrameTimeNanos) / 1000000.0f);
  diff.set("feedRate", feedRate);
  diff.set("killRate", killRate);
  diff.set("dRateA", dRateA);
  diff.set("dRateB", dRateB);
  
  lastFrameTimeNanos = newNanos;
  
  // This runs the reaction-diffusion step, and saves the result in buffer0
  buffer0.beginDraw();
  buffer0.blendMode(BLEND);
  buffer0.shader(diff);
  buffer0.image(buffer0, 0, 0);
  buffer0.resetShader();
  buffer0.endDraw();
 
  // This reads the chemical channels (R, G) and produces a colored image
  buffer1.beginDraw();
  buffer1.blendMode(BLEND);
  buffer1.shader(colorify);
  buffer1.image(buffer0, 0, 0);
  buffer1.resetShader();
  buffer1.endDraw();
  image(buffer1, 0, 0);
  
  if (showHelp) {
    drawHelpText();
    controls.show();
  } else {
    controls.hide();
  }
  
  // Uncomment to visualize the seed image
  //blendMode(ADD);
  //image(seedImage, 0, 0, width, height);
}
